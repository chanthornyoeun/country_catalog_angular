{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/services/country.service.ts","./src/app/app.module.ts","./src/app/country-catalog/country-list/country-list.component.ts","./src/app/country-catalog/country-list/country-list.component.html","./src/app/country-catalog/country-detail-dialog/country-detail-dialog.component.ts","./src/app/country-catalog/country-detail-dialog/country-detail-dialog.component.html","./src/app/material/material.module.ts","./src/app/country-catalog/country-catalog.module.ts","./src/app/country-catalog/country-detail-dialog.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  API_URL: 'https://restcountries.com/v3.1'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'country-catalog-angular';\n}\n","<h1 class=\"mat-h1\">Coutries Catalog</h1>\n<app-country-list></app-country-list>\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Country } from '../models/country.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  /**\n   * All all countries\n   * @param fields Use to determine how many fields you want to.\n   * Check public APIs to see fields definition https://gitlab.com/restcountries/restcountries/-/blob/master/FIELDS.md\n   * @returns \n   */\n  getCountries(fields: string = 'name,flags,cca2,cca3,idd,altSpellings'): Observable<Country[]> {\n    return this.httpClient.get<Country[]>(environment.API_URL + `/all?fields=${fields}`);\n  }\n\n  /**\n   * Get country by code\n   * @param code 2 characters country code\n   * @returns \n   */\n  getByCode(code: string): Observable<Country> {\n    return this.httpClient\n      .get<Country>(environment.API_URL + '/alpha/' + code)\n      .pipe(\n        map(res => res[0])\n      );\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { CountryCatalogModule } from './country-catalog/country-catalog.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    CountryCatalogModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit, ViewChild, AfterViewInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { CountryService } from 'src/app/services/country.service';\nimport { debounceTime } from 'rxjs/operators';\nimport { Country } from 'src/app/models/country.model';\nimport { CountryDetailDialogService } from '../country-detail-dialog.service';\n\n@Component({\n  selector: 'app-country-list',\n  templateUrl: './country-list.component.html',\n  styleUrls: ['./country-list.component.css']\n})\nexport class CountryListComponent implements OnInit, AfterViewInit {\n\n  displayedColumns: string[] = ['flag', 'code', 'name', 'nativeName', 'altSpellings', 'callingCode'];\n  dataSource: MatTableDataSource<Country> = new MatTableDataSource<Country>();\n  searchCtl: FormControl = new FormControl();\n  isLoading: boolean = false;\n\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n\n  constructor(\n    private countryService: CountryService,\n    private countryDetailDialogService: CountryDetailDialogService\n  ) { }\n\n  ngOnInit(): void {\n    this.getCountries();\n    this.configureSortDataAccessor();\n    this.onSearchChange();\n  }\n\n  ngAfterViewInit() {\n    this.dataSource.paginator = this.paginator;\n    this.dataSource.sort = this.sort;\n  }\n\n  /**\n   * Get countries from public APIs\n   */\n  private getCountries() {\n    this.isLoading = true;\n    this.countryService.getCountries().subscribe(res => {\n      this.dataSource.data = res;\n      this.isLoading = false;\n    });\n  }\n\n  private configureSortDataAccessor() {\n    this.dataSource.sortingDataAccessor = (country, property) => {\n      return country[property].official;\n    }\n  }\n\n  private onSearchChange() {\n    this.searchCtl.valueChanges\n      .pipe(debounceTime(300))\n      .subscribe((value: string) => {\n        this.dataSource.filter = value.trim();\n      });\n  }\n\n  viewCountryDetail(countryCode: string) {\n    this.countryDetailDialogService.openDialog(countryCode);\n  }\n\n}\n","<div class=\"mat-elevation-z8 table-container\">\n  <mat-form-field class=\"search-field\" floatPlaceholder=\"auto\">\n    <input\n      matInput\n      [formControl]=\"searchCtl\"\n      autocomplete=\"off\"\n      type=\"text\"\n      placeholder=\"Search by Country Name\"\n    />\n  </mat-form-field>\n\n  <table mat-table [dataSource]=\"dataSource\" matSort>\n    <ng-container matColumnDef=\"flag\">\n      <th mat-header-cell *matHeaderCellDef>Flag</th>\n      <td mat-cell *matCellDef=\"let country\">\n        <img\n          width=\"80\"\n          src=\"{{ country.flags.png }}\"\n          alt=\"{{ country.flags.alt }}\"\n        />\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"code\">\n      <th mat-header-cell *matHeaderCellDef>Country Codes</th>\n      <td mat-cell *matCellDef=\"let country\">\n        <mat-chip-list>\n          <mat-chip>{{ country.cca2 }}</mat-chip>\n          <mat-chip>{{ country.cca3 }}</mat-chip>\n        </mat-chip-list>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Country Name</th>\n      <td mat-cell *matCellDef=\"let country\">\n        <span class=\"country-name\" (click)=\"viewCountryDetail(country.cca2)\">\n          {{ country.name.official }}\n        </span>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"nativeName\">\n      <th mat-header-cell *matHeaderCellDef>Native Country Name</th>\n      <td mat-cell *matCellDef=\"let country\">{{ country.name.official }}</td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"altSpellings\">\n      <th mat-header-cell *matHeaderCellDef>Alternative Country Name</th>\n      <td mat-cell *matCellDef=\"let country\">\n        <ul style=\"padding-inline-start: 1rem\">\n          <li *ngFor=\"let altName of country.altSpellings\">{{ altName }}</li>\n        </ul>\n      </td>\n    </ng-container>\n\n    <ng-container matColumnDef=\"callingCode\">\n      <th mat-header-cell *matHeaderCellDef>Country Calling Codes</th>\n      <td mat-cell *matCellDef=\"let country\">\n        <ng-container *ngFor=\"let suffixe of country.idd.suffixes\">\n          {{ country.idd.root }}{{ suffixe }}\n        </ng-container>\n      </td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n    <tr class=\"mat-row\" *matNoDataRow>\n      <td\n        class=\"mat-cell\"\n        [colSpan]=\"displayedColumns.length\"\n        style=\"text-align: center\"\n      >\n        {{ isLoading ? \"Loading...\" : \"No data found\" }}\n      </td>\n    </tr>\n  </table>\n  <mat-paginator\n    class=\"mat-paginator-sticky\"\n    [pageSizeOptions]=\"[25, 50, 100]\"\n    showFirstLastButtons\n  ></mat-paginator>\n</div>\n","import { Component, Inject, OnInit } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { Observable } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { Country } from 'src/app/models/country.model';\nimport { CountryService } from 'src/app/services/country.service';\n\n@Component({\n  selector: 'app-country-detail-dialog',\n  templateUrl: './country-detail-dialog.component.html',\n  styleUrls: ['./country-detail-dialog.component.css']\n})\nexport class CountryDetailDialogComponent implements OnInit {\n\n  isLoading: boolean = true;\n  country$: Observable<Country>;\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private countryService: CountryService\n  ) { }\n\n  ngOnInit(): void {\n    this.getCountryDetailByCode(this.data.countryCode);\n  }\n\n\n  private getCountryDetailByCode(countryCode: string) {\n    this.country$ = this.countryService.getByCode(countryCode)\n      .pipe(\n        finalize(() => this.isLoading = false)\n      );\n  }\n\n}\n","<h1 matDialogTitle>\n  <div class=\"title-container\">\n    <span>Country Info</span>\n    <span class=\"btn-close\" matDialogClose matTooltip=\"Close Dialog\">X</span>\n  </div>\n</h1>\n\n<mat-dialog-content>\n  <ng-container *ngIf=\"country$ | async as country\">\n    <div class=\"container\">\n      <img\n        style=\"aspect-ratio: 16/9\"\n        width=\"400\"\n        src=\"{{ country.flags.png }}\"\n        alt=\"{{ country.flags.alt }}\"\n      />\n\n      <div class=\"info\">\n        <h2>{{ country.name.official }}</h2>\n        <div>\n          <mat-chip-list>\n            <span class=\"label country-code\">Country Codes:</span>\n            <mat-chip>{{ country.cca2 }}</mat-chip>\n            <mat-chip>{{ country.cca3 }}</mat-chip>\n          </mat-chip-list>\n        </div>\n        <div><span class=\"label\">Region:</span> {{ country.region }}</div>\n        <div>\n          <span class=\"label\">Population:</span>\n          {{ country.population | number }}\n        </div>\n        <div><span class=\"label\">Capitals:</span> {{ country.capital }}</div>\n\n        <div class=\"border-countries\">\n          <span class=\"label\">Border Countries:</span>\n          <mat-chip-list>\n            <mat-chip *ngFor=\"let borderCountry of country.borders\">{{\n              borderCountry\n            }}</mat-chip>\n          </mat-chip-list>\n        </div>\n      </div>\n    </div>\n  </ng-container>\n  <span *ngIf=\"isLoading\">Loading...</span>\n</mat-dialog-content>\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatPaginatorModule } from '@angular/material/paginator';\nimport { MatSortModule } from '@angular/material/sort';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatDialogModule } from '@angular/material/dialog';\n\n\n\n@NgModule({\n  declarations: [],\n  exports: [\n    CommonModule,\n    MatTableModule,\n    MatChipsModule,\n    MatPaginatorModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatTooltipModule,\n    MatDialogModule,\n  ]\n})\nexport class MaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CountryListComponent } from './country-list/country-list.component';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MaterialModule } from '../material/material.module';\nimport { CountryDetailDialogComponent } from './country-detail-dialog/country-detail-dialog.component';\n\n\n\n@NgModule({\n  declarations: [CountryListComponent, CountryDetailDialogComponent],\n  imports: [\n    CommonModule,\n    MaterialModule,\n    ReactiveFormsModule\n  ],\n  exports: [CountryListComponent]\n})\nexport class CountryCatalogModule { }\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { CountryDetailDialogComponent } from './country-detail-dialog/country-detail-dialog.component';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CountryDetailDialogService {\n\n  constructor(private matDialog: MatDialog) { }\n\n  openDialog(countryCode: string) {\n    this.matDialog.open(CountryDetailDialogComponent, { data: { countryCode } }).afterClosed();\n  }\n\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}